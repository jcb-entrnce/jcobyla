=JCobyla

<b>Constrained Optimization BY Linear Approximation in Java</b>

COBYLA2 is an implementation of Powell’s nonlinear derivative–free constrained
optimization that uses a linear approximation approach. The algorithm is a
sequential trust–region algorithm that employs linear approximations to the
objective and constraint functions, where the approximations are formed by
linear interpolation at n + 1 points in the space of the variables and tries to
maintain a regular–shaped simplex over iterations.

It solves nonsmooth NLP with a moderate number of variables (about 100).
Inequality constraints only.

The initial point X is taken as one vertex of the initial simplex with zero
being another, so, X should not be entered as the zero vector.

==Links

* This is a Java version of Mike Powell's F77 implementation of COBYLA2,
  available at ftp://plato.la.asu.edu/pub/other_software/cobyla2.tar.gz
* The Java version is a straightforward translation of the C# port, available at
  https://github.com/cureos/cscobyla
* Mike Powell's paper on Direct Search methods is available at
  http://www.damtp.cam.ac.uk/user/na/NA_papers/NA1998_04.ps.gz

==Usage

The files _Cobyla.java_, _Calcfc.java_ and _CobylaExitStatus.java_ can be
included in the package _com.cureos.numerics_ of any Java project.

The Java implementation is relatively faithful to the original Fortran 77 and 90
implementations. It should be noted however that the indexing of the variables
and constraints arrays in the _public_ interface is zero-based, i.e. for a
problem with 3 variables, x[0], x[1] and x[2] should be employed in the
objective and constraints function evaluations.

The objective function and (potentially) constraints functions computation
should be is represented by the _Compute_ method in the _Calcfc_ interface. 
Implement the interface explicitly or anonymously. The _Compute_ method exhibits
the following signature:

    double Compute(int n, int m, double[] x, double[] con)

where _n_ is the number of variables, _m_ is the number of constraints, _x_ is
the variable array, and _con_ is the array of calculated constraints function
values. The method should return the value of the objective function.

To minimize the objective function subject to constraints, call the static
_Cobyla.FindMinimum_ method:

    CobylaExitStatus FindMinimum(Calcfc calcfc, int n, int m, double[] x, 
                      double rhobeg, double rhoend, int iprint, int maxfun);

where _x_ on input is the initial variable array, _rhobeg_ and _rhoend_ are the
initial and final values of the simplex, _iprint_ (0..3)
specifies the level of output to the console, and _maxfun_ is the maximum
allowed number of function evaluations. On output _x_ is the optimal obtained
variable values. The method returns final optimization status, which is one of
normal termination, maximum iterations reached or diverging rounding errors.

For usage examples with anonymous interface implementations, please review the
_CobylaTest.java_ file in the _test_ folder.

==The MIT License

Copyright (c) 2012 Anders Gustafsson, Cureos AB.

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

==Revision history

* May 2, 2012: Reference to usage examples.
* May 1, 2012: Initial document.
